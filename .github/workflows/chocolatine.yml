name: Chocolatine Project

on:
    push:
        branches-ignore:
        - "ga-ignore-*"
    pull_request:
        branches-ignore:
        - "ga-ignore-*"

env:
    MIRROR_URL: git@github.com:EpitechPGEPromo2029/B-DOP-200-PAR-2-1-chocolatine-nicky.truong.git
    EXECUTABLES: pain_au_chocolat

jobs:
    check_coding_style:
        needs: [check_program_compilation, run_tests]
        name: "Coding style checker"
        runs-on: ubuntu-latest
        container:
            image: ghcr.io/epitech/coding-style-checker:latest
        steps:
            - uses: actions/checkout@v4

            - name: Step1 = Run coding style script
              run: |
                check.sh $(pwd) $(pwd)
                input="coding-style-reports.log"
                while IFS=":" read -r name line error_type error_code
                    do
                        echo "::error title=$error_type coding style error,file=$name,line=$line::$error_code"
                    done < "$input"
            - name: Step1.1 = Show coding style (if any)
              run:  |
                    if [ -s coding-style-reports.log ]; then
                        exit 1
                    fi

    check_program_compilation:
        if: startsWith(github.event.repository.name, 'EpitechPGEPromo2029/B-DOP-200-PAR-2-1-chocolatine-nicky.truong.git')
        name: "Check if the program compile correctly"
        runs-on: ubuntu-latest
        container:
            image: epitechcontent/epitest-docker
        steps:
            - uses: actions/checkout@v4

            - name: Step1 = Launch make
              run: make
              timeout-minutes: 2

            - name: Step2 = Launch clean
              run: make clean

            - name: Step3 = Verify executable
              run: |
                    if [ ! -x "$EXECUTABLES"]; then
                        exit 1
                    fi

    run_tests:
        needs: [check_program_compilation]
        name: "Check if unit_test run"
        runs-on: ubuntu-latest
        container:
            image: epitechcontent/epitest-docker
        steps:
            - uses: actions/checkout@v4
            - name: Launch run_tests
              run: make tests_run
              timeout-minutes: 2

    push_to_mirror:
        needs: [check_program_compilation, run_tests, check_coding_style, check_banned_function]
        name: "Push all the repo to the mirror one"
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0
            - uses: pixta-dev/repository-mirroring-action@v1
              with:
                target_repo_url:
                    ${{ env.MIRROR_URL }}
                ssh_private_key:
                    ${{ secrets.GIT_SSH_PRIVATE_KEY }}

    check_banned_function:
        needs: [check_program_compilation, check_coding_style]
        name: "Check if there is banned function(s)"
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                    fetch-depth: 0